{"version":3,"file":"static/js/805.91f7d524.chunk.js","mappings":"8KACA,EAA0B,yBAA1B,EAA0D,sBAA1D,EAAyF,wBAAzF,EAA0H,wBAA1H,EAAgK,6BAAhK,EAA6M,+B,mBC0B7M,EAhB4C,SAACA,GACzC,IAAMC,EAAO,WAAaD,EAAME,GAEhC,OACI,0BACI,UAAC,KAAO,CACJC,GAAIF,EACJG,UAAWC,EAAU,KAAOL,EAAMM,OAASD,EAAY,IAAI,WAE3D,gBAAKE,IAAKP,EAAMQ,OAAQC,IAAI,MAC5B,uBAAYL,UAAWC,EAAU,SAAEL,EAAMU,WAIzD,ECxBA,GAAiB,ECcjB,EAR2C,SAACV,GACxC,OACI,gBAAKI,UAAWC,EAAAA,QAAW,SACtBL,EAAMW,SAGnB,E,wCCgDA,EA5CqC,WACjC,IAAMC,GAAaC,EAAAA,EAAAA,KAAY,SAACC,GAAmB,OAAKA,EAAMF,UAAU,IAClEG,GAASF,EAAAA,EAAAA,KAAY,SAACC,GAAmB,OAAKA,EAAME,KAAKD,MAAM,IAC/DE,GAAWC,EAAAA,EAAAA,MACXC,GAAyBC,EAAAA,EAAAA,OAE/BC,EAAAA,EAAAA,YAAU,YACS,IAAXN,GAAkBE,EAAS,SACnC,GAAG,CAACF,IAEJ,IAIMO,EAAQV,EAAWW,UAAUC,KAAI,SAACC,GACpC,OACI,SAAC,EAAU,CACPf,KAAMe,EAAGf,KACTR,GAAIuB,EAAGvB,GAEPM,OAAQiB,EAAGjB,QADNiB,EAAGvB,GAKpB,IAEMwB,EAAWd,EAAWe,aAAaH,KAAI,SAACC,GAC1C,OAAO,SAAC,EAAO,CAACd,QAASc,EAAGd,QAAST,GAAIuB,EAAGvB,IAASuB,EAAGvB,GAC5D,IAEA,OACI,iBAAKE,UAAWC,EAAW,WACvB,gBAAKD,UAAWC,EAAe,SAAEiB,KACjC,iBAAKlB,UAAWC,EAAiB,UAC5BqB,GACD,SAACE,EAAA,EAAmB,CAChBhB,WAAYA,EACZiB,WA3BS,SAAClB,GACtBQ,EAASW,EAAAA,EAAAA,iBAA+BnB,GAC5C,SA8BJ,C,0ECaA,IAxDoE,SAACX,GAEjE,IAWM+B,GAAcC,EAAAA,EAAAA,GAAiB,KAI/BC,EACF,WADkD,2BAC9CC,EAAU,yBAAVA,EAAU,uBACV,SAACC,GAAa,OACVD,EAAWE,QACP,SAACC,EAAyBC,GAAS,OAAKD,GAASC,EAAUH,EAAM,QACjEI,EACF,CAAD,EAEb,OACI,SAAC,KAAI,CACDC,SAzBY,SAACC,GACjBzC,EAAM6B,WAAWY,EAAKC,YAC1B,EAwBQC,OAAQ,gBAAGC,EAAY,EAAZA,aAAY,OACnB,kBAAMJ,SAAUI,EAAa,WACzB,0BACKC,EAAAA,EAAAA,IAEGZ,EAAkBF,GAClB,cACAe,EAAAA,GACA,iEAGR,gBAAK1C,UAAU,GAAE,UACb,4BAAQ,gBAET,GAIvB,C","sources":["webpack://react-samurai/./src/components/Dialogs/Dialogs.module.css?1b2e","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/Message/Message.module.css","components/Dialogs/Message/Message.tsx","components/Dialogs/Dialogs.tsx","components/TextInputWithButton/TextInputWithButton.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Dialogs_dialogs__qr6jT\",\"item\":\"Dialogs_item__X-eLk\",\"person\":\"Dialogs_person__fXTfF\",\"active\":\"Dialogs_active__NsI2Q\",\"usersColumn\":\"Dialogs_usersColumn__jLOaL\",\"messageColumn\":\"Dialogs_messageColumn__G0M+H\",\"textArea\":\"Dialogs_textArea__aGszn\",\"buttonWrapper\":\"Dialogs_buttonWrapper__EfNgn\"};","import React from \"react\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport cl from \"./../Dialogs.module.css\";\r\n\r\n\r\ntype dialogItemType ={\r\n    id: number\r\n    active?:  boolean\r\n    avatar: string\r\n    name: string\r\n}\r\nconst DialogItem:React.FC<dialogItemType> = (props) => {\r\n    const path = \"dialogs/\" + props.id;\r\n\r\n    return (\r\n        <div>\r\n            <NavLink\r\n                to={path}\r\n                className={cl.item + \" \" + (props.active ? cl.active : \"\")}\r\n            >\r\n                <img src={props.avatar} alt=\"\" />\r\n                <figcaption className={cl.person}>{props.name}</figcaption>\r\n            </NavLink>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default DialogItem;\r\n","// extracted by mini-css-extract-plugin\nexport default {};","import React from \"react\";\r\nimport cl from './Message.module.css'\r\n\r\ntype messagePropsType = {\r\n    id: number\r\n    message: string\r\n}\r\nconst Message:React.FC<messagePropsType> = (props) => {\r\n    return (\r\n        <div className={cl.message}>\r\n            {props.message}            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Message;","\r\nimport React, { useEffect } from \"react\";\r\nimport cl from \"./Dialogs.module.css\";\r\nimport DialogItem from \"./DialogItem/DialogItem\";\r\nimport Message from \"./Message/Message\";\r\nimport TextInputWithButton from \"../TextInputWithButton/TextInputWithButton\";\r\nimport { dialogActions } from \"../../redux/dialogsReducer\";\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { AppStateType, DispatchType } from \"../../redux/reduxStore\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport Preloader from \"../common/Preloader/preloader\";\r\n\r\n\r\ntype propsType = {\r\n\r\n}\r\n\r\nconst Dialogs: React.FC<propsType> = () => {\r\n    const dialogPage = useSelector((state: AppStateType) => state.dialogPage)\r\n    const isAuth = useSelector((state: AppStateType) => state.auth.isAuth)\r\n    const navigate = useNavigate()\r\n    const dispatch: DispatchType = useDispatch()\r\n\r\n    useEffect(() => {\r\n        if (isAuth === false) navigate('/login')\r\n    }, [isAuth])\r\n\r\n    const addDialogCreator = (message: string) => {\r\n        dispatch(dialogActions.addDialogCreator(message))\r\n    }\r\n\r\n    const users = dialogPage.usersData.map((el) => {\r\n        return (\r\n            <DialogItem\r\n                name={el.name}\r\n                id={el.id}\r\n                key={el.id}\r\n                avatar={el.avatar}\r\n\r\n            />\r\n        );\r\n    });\r\n\r\n    const messages = dialogPage.messagesData.map((el) => {\r\n        return <Message message={el.message} id={el.id} key={el.id} />;\r\n    });\r\n\r\n    return (\r\n        <div className={cl.dialogs}>\r\n            <div className={cl.usersColumn}>{users}</div>\r\n            <div className={cl.messageColumn}>\r\n                {messages}\r\n                <TextInputWithButton\r\n                    dialogPage={dialogPage}\r\n                    addMessage={addDialogCreator}\r\n                />\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Dialogs;\r\n","\r\nimport { FieldValidator } from 'final-form';\r\nimport React from 'react';\r\nimport { Form } from 'react-final-form';\r\nimport { iniialStateType } from '../../redux/dialogsReducer';\r\nimport { validatorType } from '../../utils/validators/validators';\r\nimport { maxLengthCreator } from '../../utils/validators/validators';\r\nimport { createField, Textarea } from '../common/FormsControl/FormsControl';\r\nimport classes from './TextInputWithButton.module.css'\r\n\r\n\r\ntype TextInputWithButtonPropsType = {\r\n    addMessage: (message: string) => void\r\n    dialogPage?: iniialStateType\r\n}\r\n\r\nconst TextInputWithButton: React.FC<TextInputWithButtonPropsType> = (props) => {\r\n\r\n    let addNewMessage = (data: dataType) => {\r\n        props.addMessage(data.messageBody);\r\n    };\r\n    //Возможно ли \"нарисовать\" строки value и placeholder в свойствах textarea\r\n    // через тернарный оператор, чтобы не хардкодить их значения\r\n    // (На странице Profile исходным текстом должа быть KAWABANGA и\r\n    //     после ввода - пустая строка, в Messages - только плейсхолдер )\r\n    // function valueOrPlaceholder() {\r\n    //     return props.profie ? <div>value = { path }</div> : <div>placeholder = \"Твой ответ\"</div>;\r\n    // };\r\n\r\n    const maxLength10 = maxLengthCreator(255);\r\n\r\n    // Эта хрень(validate) не принимает валидаторы по одному,поэтому НАДО создать\r\n    // функцию которая соберет все валидаторы в себя\r\n    const composeValidators: FieldValidator<validatorType> =\r\n        (...validators: Array<any>) =>\r\n            (value: string) =>\r\n                validators.reduce(\r\n                    (error: string | boolean, validator) => error || validator(value),\r\n                    undefined\r\n                );\r\n\r\n    return (\r\n        <Form\r\n            onSubmit={addNewMessage}\r\n            render={({ handleSubmit }) => (\r\n                <form onSubmit={handleSubmit}>\r\n                    <div>\r\n                        {createField<TextInputWithButtonValueKeys>(\r\n                            // @ts-ignore незнаю как решить TS ошибку\r\n                            composeValidators(maxLength10),\r\n                            'messageBody',\r\n                            Textarea,\r\n                            'Твой ответ...'\r\n                        )}\r\n                    </div>\r\n                    <div className=\"\">\r\n                        <button>CLICK !</button>\r\n                    </div>\r\n                </form>\r\n            )}\r\n        />\r\n    );\r\n};\r\n\r\n\r\nexport type dataType = {\r\n    messageBody: string\r\n}\r\n\r\n\r\ntype TextInputWithButtonValueKeys = keyof dataType\r\n\r\nexport default TextInputWithButton;\r\n"],"names":["props","path","id","to","className","cl","active","src","avatar","alt","name","message","dialogPage","useSelector","state","isAuth","auth","navigate","useNavigate","dispatch","useDispatch","useEffect","users","usersData","map","el","messages","messagesData","TextInputWithButton","addMessage","dialogActions","maxLength10","maxLengthCreator","composeValidators","validators","value","reduce","error","validator","undefined","onSubmit","data","messageBody","render","handleSubmit","createField","Textarea"],"sourceRoot":""}