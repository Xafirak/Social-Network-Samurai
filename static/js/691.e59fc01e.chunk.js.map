{"version":3,"file":"static/js/691.e59fc01e.chunk.js","mappings":"qQAiBIA,EAA6B,SAACC,GAC9B,MAAO,CACHC,OAAQD,EAAME,KAAKD,OAE3B,ECpBA,EAA0B,yBAA1B,EAA0D,sBAA1D,EAAyF,wBAAzF,EAA0H,wBAA1H,EAAgK,6BAAhK,EAA6M,+B,UCmB7M,EAhBmB,SAACE,GAChB,IAAMC,EAAO,WAAaD,EAAME,GAEhC,OACI,0BACI,UAAC,KAAO,CACJC,GAAIF,EACJG,UAAWC,EAAU,KAAOL,EAAMM,OAASD,EAAY,IAAI,WAE3D,gBAAKE,IAAKP,EAAMQ,OAAQC,IAAI,MAC5B,uBAAYL,UAAWC,EAAU,SAAEL,EAAMU,WAIzD,ECjBA,GAAiB,ECUjB,EARgB,SAACV,GACb,OACI,gBAAKI,UAAWC,EAAAA,QAAW,SACtBL,EAAMW,SAGnB,E,UC8BA,EAhCgB,SAACX,GACb,IAAMY,EAAQZ,EAAMa,WAAWC,UAAUC,KAAI,SAACC,GAC1C,OACI,SAAC,EAAU,CACPN,KAAMM,EAAGN,KACTR,GAAIc,EAAGd,GAEPM,OAAQQ,EAAGR,QADNQ,EAAGd,GAIpB,IAEMe,EAAWjB,EAAMa,WAAWK,aAAaH,KAAI,SAACC,GAChD,OAAO,SAAC,EAAO,CAACL,QAASK,EAAGL,QAAST,GAAIc,EAAGd,IAASc,EAAGd,GAC5D,IAEA,OACI,iBAAKE,UAAWC,EAAW,WACvB,gBAAKD,UAAWC,EAAe,SAAEO,KACjC,iBAAKR,UAAWC,EAAiB,UAC5BY,GACD,SAACE,EAAA,EAAmB,CAChBC,QAAM,EACNP,WAAYb,EAAMa,WAClBQ,SAAUrB,EAAMqB,SAChBC,WAAYtB,EAAMuB,wBAKtC,E,UCvBA,GAAeC,EAAAA,EAAAA,KACXC,EAAAA,EAAAA,KAPkB,SAAC5B,GACnB,MAAO,CACHgB,WAAYhB,EAAMgB,WAE1B,GAG6B,CAAEU,iBAAAA,EAAAA,KNXC,SAACG,GAAe,IACtCC,EAAiB,qGAIlB,OAJkB,8BACnB,WACI,OAAKC,KAAK5B,MAAMF,QACT,SAAC4B,GAAS,UAAKE,KAAK5B,SADI,SAAC,KAAQ,CAACG,GAAI,UAEjD,KAAC,EAJkB,CAAS0B,EAAAA,WAShC,OAHqCJ,EAAAA,EAAAA,IAAQ7B,EAAR6B,CACjCE,EAGR,GMDA,CAGEG,E,0ECmDF,IA7D4B,SAAC9B,GAGzB,IAWM+B,GAAcC,EAAAA,EAAAA,GAAiB,IAI/BC,EACF,WADmB,2BACfC,EAAU,yBAAVA,EAAU,uBACd,SAACC,GAAK,OACFD,EAAWE,QACP,SAACC,EAAOC,GAAS,OAAKD,GAASC,EAAUH,EAAM,QAC/CI,EACF,CAAD,EACT,OACI,SAAC,KAAI,CACDC,SAxBY,SAACC,GACjBzC,EAAMsB,WAAWmB,EAAKC,YAC1B,EAuBQC,OAAQ,gBAAGC,EAAY,EAAZA,aAAY,OACnB,kBAAMJ,SAAUI,EAAa,WACzB,0BACI,SAAC,KAAK,CACFC,SAAUZ,EAAkBa,EAAAA,EAAUf,GACtCrB,KAAM,cACNqC,UAAWC,EAAAA,GACXC,YAAY,kEAGpB,gBAAK7C,UAAU,GAAE,UACb,4BAAQ,gBAET,GAIvB,C","sources":["HOC/AuthRedirect.jsx","webpack://react-samurai/./src/components/Dialogs/Dialogs.module.css?1b2e","components/Dialogs/DialogItem/DialogItem.jsx","components/Dialogs/Message/Message.module.css","components/Dialogs/Message/Message.jsx","components/Dialogs/Dialogs.jsx","components/Dialogs/DialogsContainter.js","components/TextInputWithButton/TextInputWithButton.js"],"sourcesContent":["import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Navigate } from \"react-router-dom\";\r\n\r\nexport const WithAuthRedirect = (Component) => {\r\n    class RedirectComponent extends React.Component {\r\n        render() {\r\n            if (!this.props.isAuth) return <Navigate to={\"/login\"} />;\r\n            return <Component {...this.props} />;\r\n        }\r\n    }\r\n    let ConnectedAuthRedirectComponent = connect(mapStateToPropsforRedirect)(\r\n        RedirectComponent\r\n    );\r\n    return ConnectedAuthRedirectComponent;\r\n};\r\n\r\nlet mapStateToPropsforRedirect = (state) => {\r\n    return {\r\n        isAuth: state.auth.isAuth,\r\n    };\r\n};\r\n","// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Dialogs_dialogs__qr6jT\",\"item\":\"Dialogs_item__X-eLk\",\"person\":\"Dialogs_person__fXTfF\",\"active\":\"Dialogs_active__NsI2Q\",\"usersColumn\":\"Dialogs_usersColumn__jLOaL\",\"messageColumn\":\"Dialogs_messageColumn__G0M+H\",\"textArea\":\"Dialogs_textArea__aGszn\",\"buttonWrapper\":\"Dialogs_buttonWrapper__EfNgn\"};","import React from \"react\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport cl from \"./../Dialogs.module.css\";\r\n\r\nconst DialogItem = (props) => {\r\n    const path = \"dialogs/\" + props.id;\r\n\r\n    return (\r\n        <div>\r\n            <NavLink\r\n                to={path}\r\n                className={cl.item + \" \" + (props.active ? cl.active : \"\")}\r\n            >\r\n                <img src={props.avatar} alt=\"\" />\r\n                <figcaption className={cl.person}>{props.name}</figcaption>\r\n            </NavLink>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default DialogItem;\r\n","// extracted by mini-css-extract-plugin\nexport default {};","import React from \"react\";\r\nimport cl from './Message.module.css'\r\n\r\nconst Message = (props) => {\r\n    return (\r\n        <div className={cl.message}>\r\n            {props.message}            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Message;","// @ts-nocheck\r\nimport React from \"react\";\r\nimport cl from \"./Dialogs.module.css\";\r\nimport DialogItem from \"./DialogItem/DialogItem\";\r\nimport Message from \"./Message/Message\";\r\nimport TextInputWithButton from \"../TextInputWithButton/TextInputWithButton\";\r\n\r\nconst Dialogs = (props) => {\r\n    const users = props.dialogPage.usersData.map((el) => {\r\n        return (\r\n            <DialogItem\r\n                name={el.name}\r\n                id={el.id}\r\n                key={el.id}\r\n                avatar={el.avatar}\r\n            />\r\n        );\r\n    });\r\n\r\n    const messages = props.dialogPage.messagesData.map((el) => {\r\n        return <Message message={el.message} id={el.id} key={el.id} />;\r\n    });\r\n\r\n    return (\r\n        <div className={cl.dialogs}>\r\n            <div className={cl.usersColumn}>{users}</div>\r\n            <div className={cl.messageColumn}>\r\n                {messages}\r\n                <TextInputWithButton\r\n                    dialog\r\n                    dialogPage={props.dialogPage}\r\n                    dispatch={props.dispatch}\r\n                    addMessage={props.addDialogCreator}\r\n                />\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Dialogs;\r\n","// @ts-nocheck\r\nimport React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { compose } from \"redux\";\r\nimport { WithAuthRedirect } from \"../../HOC/AuthRedirect\";\r\nimport Dialogs from \"./Dialogs\";\r\nimport { addDialogCreator } from \"./../../redux/dialogsReducer\";\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        dialogPage: state.dialogPage,\r\n    };\r\n};\r\n\r\nexport default compose(\r\n    connect(mapStateToProps, { addDialogCreator }),\r\n    WithAuthRedirect\r\n)(Dialogs);\r\n","// @ts-nocheck\r\nimport React from \"react\";\r\nimport { Form, Field } from \"react-final-form\";\r\nimport { required } from \"./../../utils/validators/validators\";\r\nimport { maxLengthCreator } from \"./../../utils/validators/validators\";\r\nimport { Textarea } from \"./../common/FormsControl/FormsControl\";\r\n\r\nconst TextInputWithButton = (props) => {\r\n    // костыли исчезли! ура!\r\n\r\n    let addNewMessage = (data) => {\r\n        props.addMessage(data.messageBody);\r\n    };\r\n    //Возможно ли \"нарисовать\" строки value и placeholder в свойствах textarea\r\n    // через тернарный оператор, чтобы не хардкодить их значения\r\n    // (На странице Profile исходным текстом должа быть KAWABANGA и\r\n    //     после ввода - пустая строка, в Messages - только плейсхолдер )\r\n    // function valueOrPlaceholder() {\r\n    //     return props.profie ? <div>value = { path }</div> : <div>placeholder = \"Твой ответ\"</div>;\r\n    // };\r\n\r\n    const maxLength10 = maxLengthCreator(10);\r\n\r\n    // Эта хрень(validate) не принимает валидаторы по одному,поэтому НАДО создать\r\n    // функцию которая соберет все валидаторы в себя\r\n    const composeValidators =\r\n        (...validators) =>\r\n        (value) =>\r\n            validators.reduce(\r\n                (error, validator) => error || validator(value),\r\n                undefined\r\n            );\r\n    return (\r\n        <Form\r\n            onSubmit={addNewMessage}\r\n            render={({ handleSubmit }) => (\r\n                <form onSubmit={handleSubmit}>\r\n                    <div>\r\n                        <Field\r\n                            validate={composeValidators(required, maxLength10)}\r\n                            name={\"messageBody\"}\r\n                            component={Textarea}\r\n                            placeholder=\"Твой ответ...\"\r\n                        />\r\n                    </div>\r\n                    <div className=\"\">\r\n                        <button>CLICK !</button>\r\n                    </div>\r\n                </form>\r\n            )}\r\n        />\r\n    );\r\n};\r\n\r\n/* <>\r\n        <div className=\"\">\r\n            <textarea\r\n                onChange={onPostChange}\r\n                ref={input}\r\n                value={path} //\r\n                placeholder=\"Твой ответ...\" //\r\n            />\r\n        </div>\r\n        <div className=\"\">\r\n            <button onClick={addPosts}>CLICK !</button>\r\n        </div>\r\n</> */\r\n\r\nexport default TextInputWithButton;\r\n"],"names":["mapStateToPropsforRedirect","state","isAuth","auth","props","path","id","to","className","cl","active","src","avatar","alt","name","message","users","dialogPage","usersData","map","el","messages","messagesData","TextInputWithButton","dialog","dispatch","addMessage","addDialogCreator","compose","connect","Component","RedirectComponent","this","React","Dialogs","maxLength10","maxLengthCreator","composeValidators","validators","value","reduce","error","validator","undefined","onSubmit","data","messageBody","render","handleSubmit","validate","required","component","Textarea","placeholder"],"sourceRoot":""}