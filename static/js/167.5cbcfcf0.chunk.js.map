{"version":3,"file":"static/js/167.5cbcfcf0.chunk.js","mappings":"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","sources":["webpack://react-samurai/./src/components/Profile/ProfileInfo/ProfileInfo.module.css?ead2","components/Profile/ProfileInfo/ProfileStatusWithHooks.tsx","components/Profile/ProfileInfo/ProfileDataForm.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Buttons/LikeBtn.tsx","webpack://react-samurai/./src/components/Profile/MyPosts/Post/Post.module.css?87e6","components/Profile/MyPosts/Post/Post.tsx","webpack://react-samurai/./src/components/Profile/MyPosts/MyPosts.module.css?831b","components/Profile/MyPosts/MyPosts.tsx","components/Profile/Profile.tsx","components/Profile/ProfileFUNC.tsx","components/TextInputWithButton/TextInputWithButton.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"img\":\"ProfileInfo_img__UuWS1\",\"descriptionBlock\":\"ProfileInfo_descriptionBlock__k4Pt3\",\"description\":\"ProfileInfo_description__g7CbR\",\"fullName\":\"ProfileInfo_fullName__HNhiP\",\"contact_link\":\"ProfileInfo_contact_link__n9hXh\",\"contact_media\":\"ProfileInfo_contact_media__ssBnZ\",\"contact\":\"ProfileInfo_contact__jg1-h\",\"contacts\":\"ProfileInfo_contacts__BblGN\",\"aboutMe\":\"ProfileInfo_aboutMe__LyiV6\",\"formControl\":\"ProfileInfo_formControl__EX9Hj\",\"error\":\"ProfileInfo_error__5T5wW\",\"formError\":\"ProfileInfo_formError__3Au54\",\"statusText\":\"ProfileInfo_statusText__JatdO\"};","\r\nimport React from 'react';\r\nimport { useEffect, useState } from 'react';\r\nimport cl from './ProfileInfo.module.css';\r\nimport { ChangeEvent } from 'react';\r\n\r\ntype propsType = {\r\n    status: string | undefined\r\n    updateStatus: (status: string) => void\r\n    isOwner: boolean\r\n}\r\n\r\nconst ProfileStatusWithHooks = (props: propsType) => {\r\n    const [editMode, setEditMode] = useState(false);\r\n    const [status, setStatus] = useState(props.status);\r\n\r\n\r\n    useEffect(() => {\r\n        setStatus(props.status) \r\n    },[]);\r\n\r\n    const toggleActivateEditMode = () => {\r\n        return !editMode\r\n            ? (setEditMode(true), console.log('editmode true'))\r\n            : (setEditMode(false),\r\n                console.log('editmode false'),\r\n                //cтатус есть всегда, если мы обновляем его\r\n                props.updateStatus(status!));\r\n    };\r\n    const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setStatus(e.currentTarget.value);\r\n    };\r\n\r\n\r\n    return (\r\n        <div>\r\n            {(!editMode && props.isOwner )? (\r\n                <div>\r\n                    <span\r\n                        className={cl.statusText}\r\n                        onDoubleClick={toggleActivateEditMode}\r\n                    >\r\n                        {props.status || '_____'}\r\n                    </span>\r\n                </div>\r\n            ) : null}\r\n            {editMode && (\r\n                <div>\r\n                    <input\r\n                        onChange={onStatusChange}\r\n                        autoFocus={true}\r\n                        onBlur={toggleActivateEditMode}\r\n                        value={status}\r\n                    />\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ProfileStatusWithHooks;\r\n","\r\nimport React from 'react';\r\nimport {\r\n    createField,\r\n    Input,\r\n    Textarea,\r\n} from './../../common/FormsControl/FormsControl';\r\nimport { Form } from 'react-final-form';\r\nimport classes from './ProfileInfo.module.css';\r\nimport { profileType } from '../../../types/types';\r\n\r\n\r\ntype profileDataFormType = {\r\n    onSubmit: (formData: profileType) => void\r\n    profile: profileType\r\n    error: Array<string> | boolean\r\n}\r\ntype ProfileTypeKeys = keyof profileType\r\n\r\nconst ProfileDataForm: React.FC<profileDataFormType> = ({ onSubmit, profile, error }) => {\r\n\r\n    // очередная попытка сделать валидацию ошибки, по обьекту contacts не работают\r\n    // ни 'map' ни 'forEach', невозможно проитерироватся\r\n    // let contacts = profile.contacts;\r\n    // const showError = (error, key) => {\r\n    //     if (!error) return null;\r\n    //     else {\r\n    //         return error.map(e => e.includes(key) ? error[e] : undefined);\r\n    //     }\r\n    // };\r\n    //     const showErrorCreator = (error, contacts) => {\r\n    //     if (!error) return null;\r\n    //     else {\r\n    //         let newErr = []\r\n    //         for(i = 0; i < contacts.length; i++){\r\n    //             newErr.push(contacts[i])\r\n    //         }\r\n    //         let mediaName = contacts.forEach((e) => console.log(contacts[e]));\r\n    //         return error.includes(mediaName) ? error : undefined;\r\n    //     }\r\n    // };\r\n\r\n    // const incError = (errorsArr, profile, error) => {\r\n    //     return errorsArr.includes(profile.contacts)\r\n    //         ? console.log(error)\r\n    //         : undefined;\r\n    // };\r\n    // const getErrors = (error) => {\r\n    //     if (!error) return null;\r\n    //     if (error) {\r\n    //         let errors = Object.keys(error).reduce((acc, key) => {\r\n    //             let errorMessage = error[key]\r\n    //                 .split('>')[1]\r\n    //                 .toLowerCase()\r\n    //                 .slice(0, -1);\r\n    //             // console.log([errorMessage], error[key]);\r\n    //             return { ...acc, [errorMessage]: error[key] };\r\n    //         }, {});\r\n    //         console.log(errors);\r\n    //         return errors;\r\n    // }\r\n    // };\r\n    return (\r\n        <Form\r\n            onSubmit={onSubmit}\r\n            initialValues={profile}\r\n            render={({ handleSubmit }) => (\r\n                <form onSubmit={handleSubmit}>\r\n                    <div>\r\n                        <button>Save changes</button>\r\n                    </div>\r\n                    {/* @ts-ignore незнаю как решить эту проблему */}\r\n                    {error && <div className={classes.formError}>{error || error.map(e => e)}</div>}\r\n                    <div>\r\n                        <b>Full Name</b>\r\n                        {createField(undefined, 'fullName', Input, 'Full name')}\r\n                    </div>\r\n                    <div>\r\n                        <b>Looking for a job</b>\r\n                        {createField<ProfileTypeKeys>(\r\n                            undefined,\r\n                            'lookingForAJob',\r\n                            Input,\r\n                            'Do you need a job?',\r\n                            { type: 'checkbox' }\r\n                        )}\r\n                    </div>\r\n                    <div>\r\n                        <b>Job Description</b>\r\n                        {createField<ProfileTypeKeys>(\r\n                            undefined,\r\n                            'lookingForAJobDescription',\r\n                            Textarea,\r\n                            'describe your dream job'\r\n                        )}\r\n                    </div>\r\n                    <div>\r\n                        <b>About me</b>\r\n                        {createField<ProfileTypeKeys>(\r\n                            undefined,\r\n                            'aboutMe',\r\n                            Textarea,\r\n                            'Some details about you'\r\n                        )}\r\n                    </div>\r\n                    <div>\r\n                        <b className={classes.contacts}>Контакты</b>:\r\n                        {Object.keys(profile.contacts).map((key) => {\r\n                            return (\r\n                                <div key={key}>\r\n                                    <b>\r\n                                        {key.replace(/\\b\\w/g, (c) =>\r\n                                            c.toUpperCase()\r\n                                        )}\r\n                                    </b>\r\n                                    :\r\n                                    {/* хз как типизировать этот createField */}\r\n                                    {createField(\r\n                                        undefined,\r\n                                        'contacts.' + key,\r\n                                        Textarea,\r\n                                        key\r\n                                    )}\r\n                                </div>\r\n                            );\r\n                        })}\r\n                    </div>\r\n                </form>\r\n            )}\r\n        />\r\n    );\r\n};\r\n\r\nexport default ProfileDataForm;\r\n","\r\nimport React from 'react';\r\nimport Preloader from '../../common/Preloader/preloader';\r\nimport classes from './ProfileInfo.module.css';\r\nimport userPhoto from '../../../assets/images/user.jpg';\r\nimport ProfileStatusWithHooks from './ProfileStatusWithHooks';\r\nimport { useState } from 'react';\r\nimport ProfileDataForm from './ProfileDataForm';\r\nimport { ChangeEvent } from 'react';\r\nimport { contactsType, profileType } from '../../../types/types';\r\nimport { profileInitialStateType } from '../../../redux/profileReducer';\r\n\r\n\r\ntype propsType = {\r\n    profile: profileType | undefined\r\n    status: string | undefined\r\n    isOwner: boolean\r\n    savePhoto: (photos: File) => void\r\n    saveProfile: (profile: profileType) => void\r\n    error: Array<string> | boolean\r\n    profilePage?: profileInitialStateType;\r\n    updateStatus: (status: string ) => void\r\n    isEditProfileWasSuccesfull: boolean\r\n}\r\n\r\n\r\nconst ProfileInfo: React.FC<propsType> = ({\r\n    profile,\r\n    status,\r\n    updateStatus,\r\n    isOwner,\r\n    savePhoto,\r\n    saveProfile,\r\n    error,\r\n    isEditProfileWasSuccesfull,\r\n}) => {\r\n\r\n    const [editMode, setEditMode] = useState(false);\r\n\r\n\r\n    if (!profile) {\r\n        return <Preloader />;\r\n    }\r\n\r\n    const onMainPhotoSelected = (e: ChangeEvent<HTMLInputElement>) => {\r\n        if (e.target.files?.length) {\r\n            savePhoto(e.target.files[0]);\r\n        }\r\n    };\r\n\r\n    const onSubmit = (formData: profileType) => {\r\n        saveProfile(formData);\r\n        console.log(isEditProfileWasSuccesfull);\r\n\r\n        if (isEditProfileWasSuccesfull === true) {\r\n            setEditMode(false)\r\n        }\r\n    }\r\n\r\n\r\n    return (\r\n        <div className=\"profileInfo\">\r\n            <div>\r\n                <img\r\n                    className={classes.img}\r\n                    src=\"https://external-content.duckduckgo.com/iu/?u=https%3A%2F%2Fwallpapercave.com%2Fwp%2FxefZBsj.jpg&f=1&nofb=1&ipt=739dd23f5464e125250fe492a68a3903c8f93acba5a7c4693889bdb932f22d59&ipo=images\"\r\n                    alt=\"beach\"\r\n                />\r\n            </div>\r\n            <div className={classes.descriptionBlock}>\r\n                <div className={classes.description}>\r\n                    <img\r\n                        src={profile.photos.large || userPhoto}\r\n                        alt=\"\"\r\n                        className={classes.avatar}\r\n                    />\r\n                    <div>\r\n                        {isOwner ? (\r\n                            <input type=\"file\" onChange={onMainPhotoSelected} />\r\n                        ) : (\r\n                            true\r\n                        )}\r\n                    </div>\r\n                    <span className={classes.aboutMe}>\r\n                        <b>STATUS</b>:\r\n                        <ProfileStatusWithHooks\r\n                            status={status}\r\n                            updateStatus={updateStatus}\r\n                            isOwner={isOwner}\r\n                        />\r\n                    </span>\r\n                </div>\r\n                <div className={classes.description}>\r\n                    {editMode ? (\r\n                        <ProfileDataForm\r\n                            profile={profile}\r\n                            onSubmit={onSubmit}\r\n                            error={error}\r\n                        />\r\n                    ) : (\r\n                        <ProfileData\r\n                            profile={profile}\r\n                            isOwner={isOwner}\r\n                            activateEditMode={() => setEditMode(true)}\r\n                        />\r\n                    )}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\ntype profileDataPropType = {\r\n    profile: profileType\r\n    isOwner: boolean\r\n    activateEditMode: () => void\r\n}\r\n\r\nconst ProfileData: React.FC<profileDataPropType> = ({ profile, isOwner, activateEditMode }) => {\r\n   \r\n\r\n    return (\r\n        <div>\r\n            {isOwner ? (\r\n                <div>\r\n                    <button onClick={activateEditMode}>\r\n                        Wanna edit your Profile?\r\n                    </button>\r\n                </div>\r\n            ) : null}\r\n            <span>\r\n                <div className={classes.fullName}>{profile.fullName}</div>\r\n                <div>\r\n                    {' '}\r\n                    <b>About me</b>: {profile.aboutMe}\r\n                </div>\r\n\r\n                <div className={classes.contacts}>\r\n                    <b>Контакты</b>:\r\n                    {Object.keys(profile.contacts).map((key) => {\r\n                        return (\r\n                            <Contact\r\n                                key={key}\r\n                                contactName={key}\r\n                                contactURL={profile.contacts[key as keyof contactsType]}\r\n                            />\r\n                        );\r\n                    })}\r\n                </div>\r\n                <div>\r\n                    {profile.lookingForAJob ? (\r\n                        <div>\r\n                            <b>Ищу работу </b>✓\r\n                        </div>\r\n                    ) : (\r\n                        <div>\r\n                            <b>Ищу работу </b>✖\r\n                        </div>\r\n                    )}\r\n                </div>\r\n                <div className={classes.contact}>\r\n                    <b>My skillZ</b>: {profile.lookingForAJobDescription}\r\n                </div>\r\n            </span>\r\n        </div>\r\n    );\r\n};\r\n\r\ntype contactPropsType = {\r\n    contactName: string\r\n    contactURL: string\r\n}\r\nconst Contact: React.FC<contactPropsType> = ({ contactName, contactURL }) => {\r\n    return (\r\n        <div>\r\n            <div className={classes.contact}>\r\n                <span>\r\n                    <b className={classes.contact_media}>\r\n                        {contactName.replace(/\\b\\w/g, (c) => c.toUpperCase())}:\r\n                    </b>\r\n                    {contactURL ? (\r\n                        <span className={classes.contact_link}>\r\n                            {contactURL}{' '}\r\n                        </span>\r\n                    ) : (\r\n                        false\r\n                    )}\r\n                </span>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ProfileInfo;\r\n","import React, { useState } from \"react\";\r\n\r\n\r\ntype likeBtnPropstype = {\r\n    likeCount: number\r\n}\r\n\r\n\r\nconst LikeBtn: React.FC<likeBtnPropstype> = ({ likeCount }) => {\r\n    const [counter, setCounter] = useState(likeCount)\r\n    const [disabled, setDisabled] = useState(false);\r\n\r\n    function increaseCount() {\r\n        setCounter(counter => counter + 1)\r\n        setDisabled(true)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <button\r\n                disabled={disabled}\r\n                onClick={() => increaseCount()}\r\n            >Like</button>\r\n            <div style={{ color: 'pink' }}>Likes: <span>{counter}</span></div>\r\n        </div>\r\n    );\r\n};\r\n\r\n\r\n\r\n\r\n\r\nexport default LikeBtn;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"myPosts\":\"Post_myPosts__JjzAb\",\"myPosts_message\":\"Post_myPosts_message__X0pZc\",\"likeBtn\":\"Post_likeBtn__Favkw\"};","\r\nimport React from \"react\";\r\nimport LikeBtn from \"../../../Buttons/LikeBtn\";\r\nimport cl from './Post.module.css'\r\n\r\n\r\ntype postPropstype = {\r\n    message: string\r\n    likes: number\r\n}\r\nconst Post: React.FC<postPropstype> = ({ message, likes }) => {\r\n\r\n    return (\r\n        <div>\r\n            <div className={cl.myPosts}>\r\n\r\n                <img src=\"https://external-content.duckduckgo.com/iu/?u=https%3A%2F%2Ftse1.mm.bing.net%2Fth%3Fid%3DOIP.ELkGbqOuLQfk5CC-ZTSVZQHaHa%26pid%3DApi&f=1&ipt=e14d637863df1ce2951ca706b519dc8c2d85fff0e7a4090cb27cb9d970440749&ipo=images\" alt=\"pepe\" />\r\n\r\n                <div className={cl.myPosts_message}>\r\n                    {message}\r\n                </div>\r\n\r\n                <div className={cl.likeBtn}>\r\n                    <LikeBtn likeCount={likes} />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Post;","// extracted by mini-css-extract-plugin\nexport default {\"postBlock\":\"MyPosts_postBlock__E1Qck\",\"postBlock_title\":\"MyPosts_postBlock_title__kNIVV\"};","\r\nimport React from 'react';\r\nimport Post from './Post/Post';\r\nimport cl from './MyPosts.module.css';\r\nimport TextInputWithButton from '../../TextInputWithButton/TextInputWithButton';\r\nimport { postDataType } from '../../../types/types';\r\n\r\ntype myPostsPropsType = {\r\n    postData: Array<postDataType>\r\n    addMessage: (message: string) => void\r\n\r\n}\r\nconst MyPosts: React.FC<myPostsPropsType> = ({ postData, addMessage }) => {\r\n    return (\r\n        <div className={cl.postBlock}>\r\n            <h3 className={cl.postBlock_title}>myPosts</h3>\r\n            {postData.map((el: any) => {\r\n                return (\r\n                    <Post\r\n                        message={el.message}\r\n                        likes={el.likes}\r\n                        key={el.id}\r\n                    />\r\n                );\r\n            })}\r\n\r\n            <TextInputWithButton\r\n                addMessage={addMessage}\r\n            />\r\n\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default MyPosts;\r\n","\r\nimport React from 'react';\r\nimport ProfileInfo from './ProfileInfo/ProfileInfo';\r\nimport MyPosts from './MyPosts/MyPosts';\r\nimport { postDataType, profileType } from '../../types/types';\r\n\r\n\r\ntype propsType = {\r\n    status: string | undefined\r\n    profile: profileType | undefined\r\n    isOwner: boolean\r\n    isEditProfileWasSuccesfull: boolean\r\n    error: Array<string> | boolean\r\n    postData: Array<postDataType>\r\n    savePhoto: (photos: File) => void\r\n    addMessage: (messageBody: string) => void\r\n    saveProfile: (profile: profileType) => void\r\n    updateStatus: (status: string) => void\r\n}\r\n\r\nconst Profile: React.FC<propsType> = (props) => {\r\n\r\n    // установка условия для рендеринга страницы для избежания ненужных ререндеров\r\n    //при обновлении страницы F5, компонент рендерится 1 раз, но если перейти на\r\n    // другую страницу и вернутся обратно - компонент ререндерится 3 раза - почему?\r\n\r\n    // Установка прелоадера в ProfileFUNC не помогла, т.к. он ререндерится всего 3 раза \r\n    // и если за 3 ререндера условие не выполняется, показывается вечная крутилка\r\n    return (\r\n        <div>\r\n            <ProfileInfo\r\n                isOwner={props.isOwner}\r\n                profile={props.profile}\r\n                status={props.status}\r\n                error={props.error}\r\n                isEditProfileWasSuccesfull={props.isEditProfileWasSuccesfull}\r\n                savePhoto={props.savePhoto}\r\n                updateStatus={props.updateStatus}\r\n                saveProfile={props.saveProfile}\r\n            />\r\n            <MyPosts\r\n                postData={props.postData}\r\n                addMessage={props.addMessage}\r\n            />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Profile;\r\n","\r\nimport React from 'react';\r\nimport Profile from './Profile';\r\nimport { useDispatch } from 'react-redux';\r\nimport { useNavigate, useParams } from 'react-router-dom';\r\nimport { getStatus, profileActions, savePhoto, saveProfile, showProfile, updateStatus } from '../../redux/profileReducer';\r\nimport { useEffect } from 'react';\r\nimport { AppStateType, DispatchType } from '../../redux/reduxStore';\r\nimport { profileType } from '../../types/types';\r\nimport { useSelector } from 'react-redux';\r\n\r\n// надо ли в функциональной компоненте разделять пропсы примитивные и  \r\n// пропсы-методы (как в классовой) \r\n\r\n\r\n// ДЗ  избавить компоненту от коннекта и withRouter\r\n//  Done\r\n\r\nexport const ProfileFUNC: React.FC = () => {\r\n\r\n    //как правильно - вытащить из стейта profilePage в отдельную переменную и из\r\n    // нее вытаскивать нужные данные (error, status, etc.) или для каждой данной \r\n    // сделать свой селектор из стейта?\r\n    const postData = useSelector((state: AppStateType) => state.profilePage.postData)\r\n    const authorizedUserId = useSelector((state: AppStateType) => state.auth.userId)\r\n    const error = useSelector((state: AppStateType) => state.profilePage.error)\r\n    const status = useSelector((state: AppStateType) => state.profilePage.status)\r\n    const profile = useSelector((state: AppStateType) => state.profilePage.profile)\r\n    const isEditProfileWasSuccesfull = useSelector((state: AppStateType) => state.profilePage.isEditProfileWasSuccesfull)\r\n    const params = useParams()\r\n    const navigate = useNavigate();\r\n    const dispatch: DispatchType = useDispatch()\r\n\r\n    const showProfile1 = (userId: number) => {\r\n        dispatch(showProfile(userId))\r\n    }\r\n\r\n    const getStatus1 = (userId: number) => {\r\n        dispatch(getStatus(userId))\r\n    }\r\n\r\n    const updateStatus1 = (status: string) => {\r\n        dispatch(updateStatus(status))\r\n    }\r\n    const savePhoto1 = (photos: File) => {\r\n        dispatch(savePhoto(photos))\r\n    }\r\n    const saveProfile1 = (profile: profileType) => {\r\n        dispatch(saveProfile(profile))\r\n    }\r\n    const addActionCreator = (messageBody: string) => {\r\n        dispatch(profileActions.addActionCreator(messageBody))\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n    let anotherUserId: number | undefined = +params.userId!;\r\n    let userId = authorizedUserId;\r\n\r\n    function refreshingProfile(anotherUserId: number | undefined, userId: number) {\r\n        if (!anotherUserId) {\r\n            anotherUserId = userId;\r\n            if (!userId) {\r\n                return navigate('/login');\r\n            }\r\n        }\r\n\r\n        showProfile1(anotherUserId);\r\n        getStatus1(anotherUserId);\r\n    }\r\n\r\n    useEffect(() => {\r\n        refreshingProfile(anotherUserId as number | undefined, userId as number);\r\n    }, [anotherUserId, userId]);\r\n    return (\r\n        <div>\r\n            <Profile\r\n                profile={profile}\r\n                status={status}\r\n                isOwner={!params.userId}\r\n                postData={postData}\r\n                updateStatus={updateStatus1}\r\n                addMessage={addActionCreator}\r\n                savePhoto={savePhoto1}\r\n                saveProfile={saveProfile1}\r\n                error={error}\r\n                isEditProfileWasSuccesfull={isEditProfileWasSuccesfull}\r\n            />\r\n        </div>\r\n    );\r\n};\r\n\r\n\r\n\r\n","\r\nimport { FieldValidator } from 'final-form';\r\nimport React from 'react';\r\nimport { Form } from 'react-final-form';\r\nimport { iniialStateType } from '../../redux/dialogsReducer';\r\nimport { validatorType } from '../../utils/validators/validators';\r\nimport { maxLengthCreator } from '../../utils/validators/validators';\r\nimport { createField, Textarea } from '../common/FormsControl/FormsControl';\r\nimport classes from './TextInputWithButton.module.css'\r\n\r\n\r\ntype TextInputWithButtonPropsType = {\r\n    addMessage: (message: string) => void\r\n    dialogPage?: iniialStateType\r\n}\r\n\r\nconst TextInputWithButton: React.FC<TextInputWithButtonPropsType> = (props) => {\r\n\r\n    let addNewMessage = (data: dataType) => {\r\n        props.addMessage(data.messageBody);\r\n    };\r\n    //Возможно ли \"нарисовать\" строки value и placeholder в свойствах textarea\r\n    // через тернарный оператор, чтобы не хардкодить их значения\r\n    // (На странице Profile исходным текстом должа быть KAWABANGA и\r\n    //     после ввода - пустая строка, в Messages - только плейсхолдер )\r\n    // function valueOrPlaceholder() {\r\n    //     return props.profie ? <div>value = { path }</div> : <div>placeholder = \"Твой ответ\"</div>;\r\n    // };\r\n\r\n    const maxLength10 = maxLengthCreator(255);\r\n\r\n    // Эта хрень(validate) не принимает валидаторы по одному,поэтому НАДО создать\r\n    // функцию которая соберет все валидаторы в себя\r\n    const composeValidators: FieldValidator<validatorType> =\r\n        (...validators: Array<any>) =>\r\n            (value: string) =>\r\n                validators.reduce(\r\n                    (error: string | boolean, validator) => error || validator(value),\r\n                    undefined\r\n                );\r\n\r\n    return (\r\n        <Form\r\n            onSubmit={addNewMessage}\r\n            render={({ handleSubmit }) => (\r\n                <form onSubmit={handleSubmit}>\r\n                    <div>\r\n                        {createField<TextInputWithButtonValueKeys>(\r\n                            // @ts-ignore незнаю как решить TS ошибку\r\n                            composeValidators(maxLength10),\r\n                            'messageBody',\r\n                            Textarea,\r\n                            'Твой ответ...'\r\n                        )}\r\n                    </div>\r\n                    <div className=\"\">\r\n                        <button>CLICK !</button>\r\n                    </div>\r\n                </form>\r\n            )}\r\n        />\r\n    );\r\n};\r\n\r\n\r\nexport type dataType = {\r\n    messageBody: string\r\n}\r\n\r\n\r\ntype TextInputWithButtonValueKeys = keyof dataType\r\n\r\nexport default TextInputWithButton;\r\n"],"names":["props","useState","editMode","setEditMode","status","setStatus","useEffect","toggleActivateEditMode","console","log","updateStatus","isOwner","className","cl","onDoubleClick","onChange","e","currentTarget","value","autoFocus","onBlur","onSubmit","profile","error","initialValues","render","handleSubmit","classes","map","createField","undefined","Input","type","Textarea","Object","keys","contacts","key","replace","c","toUpperCase","ProfileData","activateEditMode","onClick","fullName","aboutMe","Contact","contactName","contactURL","lookingForAJob","lookingForAJobDescription","savePhoto","saveProfile","isEditProfileWasSuccesfull","src","alt","photos","large","userPhoto","target","files","length","formData","likeCount","counter","setCounter","disabled","setDisabled","style","color","message","likes","postData","addMessage","el","id","TextInputWithButton","ProfileFUNC","useSelector","state","profilePage","authorizedUserId","auth","userId","params","useParams","navigate","useNavigate","dispatch","useDispatch","anotherUserId","refreshingProfile","showProfile","showProfile1","getStatus","getStatus1","messageBody","profileActions","maxLength10","maxLengthCreator","composeValidators","validators","reduce","validator","data"],"sourceRoot":""}